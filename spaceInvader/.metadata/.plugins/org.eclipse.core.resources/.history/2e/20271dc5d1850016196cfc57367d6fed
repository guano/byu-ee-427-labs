/*
 * tank.c
 *
 *  Created on: Sep 21, 2016
 *      Author: superman
 */


#include <stdint.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"

#define TANK_HEIGHT 8

// Packs each horizontal line of the figures into a single 32 bit word.
#define packword15(b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0)  \
((b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | \
 (b9  << 9 ) | (b8  << 8 ) | (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | \
 (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

 // This seems like a *very bad* way to store the tank data, but this is what
 // we are doing for the moment.
static const int tank_15x8[TANK_HEIGHT] =
{
	packword15(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
};

#define WORD_WIDTH 15
struct tank{
	int row;
	int col;

}tank;

int left_tank_move_draw[8];
int left_tank_move_take[8];
int right_tank_move_draw[8];
int right_tank_move_take[8];

void init_tank(unsigned int * framePointer){
	tank.row = 425;
	tank.col = 320;
	int row, col;
	 for(row=0;row<TANK_HEIGHT;row++){
		 for(col=0;col<WORD_WIDTH;col++){
			 if ((tank_15x8[row] & (1<<(WORD_WIDTH-col-1)))) {
					 framePointer[(row+tank.row)*320 + col + tank.col] = 0x0000FF00;
			 }
		 }
	 }
}




// So these all return an array of size 8- cause the tank is 8 pixels tall
// These arrays tell you which pixels you need to black and which you need to draw
int * get_left_tank_take(){
	return left_tank_move_take;
}

int * get_left_tank_draw(){
	return left_tank_move_draw;
}

int * get_right_tank_take(){
	return right_tank_move_take;
}

int * get_right_tank_draw(){
	return right_tank_move_draw;
}



// moves our tank left by a certain number of pixels
void move_left(){
	tank.col -= 1;
	int row;
	for(row = 0; row < TANK_HEIGHT; row++){
		switch (row){
		case 0:
			left_tank_move_draw[0] = (row+tank.row)*320 + 7 + tank.col;
			left_tank_move_take[0] = (row+tank.row)*320 + 8 + tank.col;
			break;
		case 1:
			left_tank_move_draw[1] = (row+tank.row)*320 + 6 + tank.col;
			left_tank_move_take[1] = (row+tank.row)*320 + 9 + tank.col;
			break;
		case 2:
			left_tank_move_draw[2] = (row+tank.row)*320 + 6 + tank.col;
			left_tank_move_take[2] = (row+tank.row)*320 + 9 + tank.col;

			break;
		case 3:
			left_tank_move_draw[3] = (row+tank.row)*320 + 1 + tank.col;
			left_tank_move_take[3] = (row+tank.row)*320 + 14 + tank.col;

			break;
		case 4:
			left_tank_move_draw[4] = (row+tank.row)*320 + 0 + tank.col;
			left_tank_move_take[4] = (row+tank.row)*320 + 15 + tank.col;

			break;
		case 5:
			left_tank_move_draw[5] = (row+tank.row)*320 + 0 + tank.col;
			left_tank_move_take[5] = (row+tank.row)*320 + 15 + tank.col;

			break;
		case 6:
			left_tank_move_draw[6] = (row+tank.row)*320 + 0 + tank.col;
			left_tank_move_take[6] = (row+tank.row)*320 + 15 + tank.col;

			break;
		case 7:
			left_tank_move_draw[7] = (row+tank.row)*320 + 0 + tank.col;
			left_tank_move_take[7] = (row+tank.row)*320 + 15 + tank.col;

			break;
		}
	}
}
//moves our tank right by a certain number of pixels

void move_right(){
		tank.col += 1;
		int row;
		for(row = 0; row < TANK_HEIGHT; row++){
			switch (row){
			case 0:
				right_tank_move_draw[0] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[0] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 1:
				right_tank_move_draw[1] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[1] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 2:
				right_tank_move_draw[2] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[2] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 3:
				right_tank_move_draw[3] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[3] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 4:
				right_tank_move_draw[4] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[4] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 5:
				right_tank_move_draw[5] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[5] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 6:
				right_tank_move_draw[6] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[6] = (row+tank.row)*320 + 6 + tank.col;
				break;
			case 7:
				right_tank_move_draw[7] = (row+tank.row)*320 + 7 + tank.col;
				right_tank_move_take[7] = (row+tank.row)*320 + 6 + tank.col;
				break;
			}
		}
}

void fire_tank(unsigned int * framePointer){
	framePointer[(tank.row-1)*320 + 7 + tank.col] = 0xFFFFFFFF;
	framePointer[(tank.row-2)*320 + 7 + tank.col] = 0xFFFFFFFF;
	framePointer[(tank.row-3)*320 + 7 + tank.col] = 0xFFFFFFFF;
}





/*
 * Here are my thoughts.
 * If any move function (or explode funtion)
 * is called on the tank, it knows it has changed.
 * Then when the renderer goes to render the tank,
 * it understands that instead of not drawing anything
 * (or drawing the entire tank, as it does at the beginning)
 * it knows to draw "updated tank," which consists of a black rectangle
 * to delete old tank data, and color rectangles to make new tank data.
 */

