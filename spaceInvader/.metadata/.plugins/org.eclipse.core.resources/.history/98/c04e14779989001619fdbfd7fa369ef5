/*
 * tank.c
 *
 *  Created on: Sep 21, 2016
 *      Author: superman
 */


#include <stdint.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"

#include "tank.h"	// Do we normally have to include our own h function?
#define TANK_HEIGHT		8		// Tank is 8 pixels high
#define TANK_INIT_ROW	210		// Tank starts at row 210
#define TANK_INIT_COL	160		// Tank starts at col 160
#define GREEN 0x0000FF00		// Hex value for green
#define BLACK 0x00000000		// Hex value for black
#define WHITE 0xFFFFFFFF		// Hex value for white

// Packs each horizontal line of the figures into a single 32 bit word.
#define packword15(b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0)  \
((b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | \
 (b9  << 9 ) | (b8  << 8 ) | (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | \
 (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

static const int tank_15x8[TANK_HEIGHT] = {		// This is how we
	packword15(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),	// Store the tank 
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),	// drawing data
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
};

#define WORD_WIDTH 15

struct tank{			// The struct for our tank
	int row;
	int col;
}tank;

struct tank_shell{		// The struct that stores the tank's bullet data
	int row;
	int col;
	bool alive;
}tank_shell;


// --------------------------------------------
// Our declaration of functions to be used
void tank_draw_pixel(uint32_t *framePointer,uint32_t row,uint32_t col,uint32_t color);
//
// --------------------------------------------



// This is 100% copied from aliens.c. Eventually it needs to move to its own global file
void tank_draw_pixel(uint32_t *framePointer,uint32_t row,uint32_t col,uint32_t color){
	#define DRAW_PIXEL_ROW_MULTIPLIER 1280	// 640 * 2 for screen doubling
	#define DRAW_PIXEL_ROW 640				// one row offset
	#define DRAW_PIXEL_DOUBLE 2				// for doubling

	// We draw 4 pixels for every 1 small-screen pixel
	framePointer[row*DRAW_PIXEL_ROW_MULTIPLIER + col*DRAW_PIXEL_DOUBLE] = color;
	framePointer[row*DRAW_PIXEL_ROW_MULTIPLIER + col*DRAW_PIXEL_DOUBLE+1] = color;
	framePointer[row*DRAW_PIXEL_ROW_MULTIPLIER+DRAW_PIXEL_ROW+ col*DRAW_PIXEL_DOUBLE] = color;
	framePointer[row*DRAW_PIXEL_ROW_MULTIPLIER+DRAW_PIXEL_ROW+ col*DRAW_PIXEL_DOUBLE + 1] = color;

}

// This initializes our tank at its proper location
void init_tank(){
	tank.row = 210;		// Tank starts at this row
	tank.col = 160;		// and column
}

// This draws (or erases, via the erase bool) an entire tank.
void draw_tank(uint32_t * framePointer, bool erase){
	int color = erase ? BLACK : GREEN ;		// green or black depending on erase
	int row, col;							// init loop vars
	for(row=0;row<TANK_HEIGHT;row++){		// Go through tank x pixels
		for(col=0;col<WORD_WIDTH;col++){	// and tank y pixels
			if ((tank_15x8[row] & (1<<(WORD_WIDTH-col-1)))) {	// If a pixel
				//  Draw the pixel
				tank_draw_pixel(framePointer, row+tank.row,col+tank.col,color);
			}
		}
	}
}

// moves our tank left by a certain number of pixels
void move_left(uint32_t * framePointer){
#define L_0_GREEN	7	// When moving left,
#define L_2_GREEN	6	// where to
#define L_3_GREEN	1	// draw green
#define L_7_GREEN	0	// pixels based on row

#define L_0_BLACK	8	// When moving left,
#define L_2_BLACK	9	// where to
#define L_3_BLACK	14	// erase pixels
#define L_7_BLACK	15	// based on row
	tank.col --;		// Move our tank left by a pixel
	int row;			// Declare loop var
	for(row = 0; row < TANK_HEIGHT; row++){
		switch (row){	// Depending on the row
		case 0:			// Draw/erase proper pixels
			tank_draw_pixel(framePointer,row+tank.row,L_0_GREEN+tank.col,GREEN);
			tank_draw_pixel(framePointer,row+tank.row,L_0_BLACK+tank.col,BLACK);
			break;
		case 1:	// Cases 1 and 2 are identical
		case 2:			// Keep drawing/erasing pixels
			tank_draw_pixel(framePointer,row+tank.row,L_2_GREEN+tank.col,GREEN);
			tank_draw_pixel(framePointer,row+tank.row,L_2_BLACK+tank.col,BLACK);
			break;
		case 3:			// Keep drawing/erasing pixels
			tank_draw_pixel(framePointer,row+tank.row,L_3_GREEN+tank.col,GREEN);
			tank_draw_pixel(framePointer,row+tank.row,L_3_BLACK+tank.col,BLACK);
			break;
		case 4: // Cases 4, 5, 6, and 7 are all identical.
		case 5:
		case 6:
		case 7:			// Keep drawing/erasing pixels
			tank_draw_pixel(framePointer,row+tank.row,L_7_GREEN+tank.col,GREEN);
			tank_draw_pixel(framePointer,row+tank.row,L_7_BLACK+tank.col,BLACK);
			break;
		}
	}
}

//moves our tank right by a certain number of pixels
void move_right(uint32_t * framePointer){
#define R_0_GREEN 7		// When moving
#define R_1_GREEN 8		// right,
#define R_2_GREEN 8		// which pixels
#define R_3_GREEN 13	// are
#define R_4_GREEN 14	// to
#define R_5_GREEN 14	// be drawn
#define R_6_GREEN 14	// green
#define R_7_GREEN 14	// based on the row

#define R_0_BLACK 6		// When moving
#define R_1_BLACK 5		// right,
#define R_2_BLACK 5		// which pixels
#define R_3_BLACK 0		// are
#define R_4_BLACK -1	// to
#define R_5_BLACK -1	// be ERASED
#define R_6_BLACK -1	// with black
#define R_7_BLACK -1	// based on the row

		tank.col ++;	// Move our tank right by a single pixel
		int r = 0;		// Start our count pointer
		// Draw and erase the proper pixels for row 0
		tank_draw_pixel(framePointer, r+tank.row, R_0_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_0_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 1
		tank_draw_pixel(framePointer, r+tank.row, R_1_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_1_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 2
		tank_draw_pixel(framePointer, r+tank.row, R_2_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_2_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 3
		tank_draw_pixel(framePointer, r+tank.row, R_3_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_3_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 4
		tank_draw_pixel(framePointer, r+tank.row, R_4_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_4_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 5
		tank_draw_pixel(framePointer, r+tank.row, R_5_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_5_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 6
		tank_draw_pixel(framePointer, r+tank.row, R_6_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_6_BLACK+tank.col, BLACK);
		r++;			// increment row counter
		// Draw and erase the proper pixels for row 07
		tank_draw_pixel(framePointer, r+tank.row, R_7_GREEN+tank.col, GREEN);
		tank_draw_pixel(framePointer, r+tank.row, R_7_BLACK+tank.col, BLACK);
}

// This creates a shell and initially draws it to the screen
void fire_tank(uint32_t * framePointer){
	if(!tank_shell.alive){
		tank_shell.col = tank.col;
		tank_shell.row = tank.row;
		tank_shell.alive = true;

		tank_draw_pixel(framePointer, tank_shell.row-1, 7+tank_shell.col, WHITE);
		tank_draw_pixel(framePointer, tank_shell.row-2, 7+tank_shell.col, WHITE);
		tank_draw_pixel(framePointer, tank_shell.row-3, 7+tank_shell.col, WHITE);
	}
}

void update_shell(uint32_t * framePointer){
	if(tank_shell.row<0){
		tank_shell.alive = false;
	}
	else if(tank_shell.alive){
		tank_shell.row -= 1;

		tank_draw_pixel(framePointer, tank_shell.row-3, 7+tank_shell.col, WHITE);
		tank_draw_pixel(framePointer, tank_shell.row, 7+tank_shell.col, BLACK);
	}
}
