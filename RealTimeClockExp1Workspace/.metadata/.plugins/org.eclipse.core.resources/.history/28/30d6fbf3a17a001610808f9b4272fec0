/*
 * timer.c
 *  Created on: Sep 13, 2016
 *  By Andrew Okazaki and Taylor Cowley
 */
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides  macros for the interrupt controller.
#include <stdbool.h>

#define BUTTON_UP 0x10		// The mask values for each button
#define BUTTON_DOWN 0x4
#define BUTTON_HOUR 0x8
#define BUTTON_MIN 0x1
#define BUTTON_SEC 0x2
#define NO_BUTTONS 0		// Mask for no buttons
#define BUTTON_DEBOUNCE_TIME 1	// Only need one clock tick to debounce buttons

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.
int currentButtonState = 0;		// Start with no buttons being pushed
int timerCount = 0;				// Seconds timer not running
int debounce_timer_up 	= 0;	// Timers for debouncing the up and
int debounce_timer_down = 0;	// down buttons

int hours = 10;					// Variables to store the time
int minutes = 10;				// Start the time at
int seconds = 40;				// nice friendly numbers

// We call this once a second to update the time
void evaluate();

// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {
	if(currentButtonState == NO_BUTTONS){
		timerCount++;
		if(timerCount >= 100){
			timerCount = 0;
			seconds++;
			evaluate();
		}
	}else{
		// The hour button is being pushed
		if(currentButtonState & BUTTON_HOUR){
			// The up button is being pushed
			if(currentButtonState & BUTTON_UP){
				debounce_timer_up++;
				if(debounce_timer_up == BUTTON_DEBOUNCE_TIME){
					hours++;
					evaluate();
				}else if(debounce_timer_up % 50 == 0 && debounce_timer_up > 150){
					hours++;
					evaluate();
				}
			}else{debounce_timer_up = 0;}
			//The down button is being pushed
			if(currentButtonState & BUTTON_DOWN){
				debounce_timer_down++;
				if(debounce_timer_down == BUTTON_DEBOUNCE_TIME){
					hours--;
					evaluate();
				}else if(debounce_timer_down % 50 == 0 && debounce_timer_down > 150){
					hours--;
					evaluate();
				}
			}else{debounce_timer_down = 0;}
		}
		// The minute button is being pushed
		if(currentButtonState & BUTTON_MIN){
			// The up button is being pushed
			if(currentButtonState & BUTTON_UP){
				debounce_timer_up++;
				if(debounce_timer_up == BUTTON_DEBOUNCE_TIME){
					minutes++;
					evaluate();
				}else if(debounce_timer_up % 50 == 0 && debounce_timer_up > 150){
					minutes++;
					evaluate();
				}
			}else{debounce_timer_up = 0;}
			// The down button is being pushed
			if(currentButtonState & BUTTON_DOWN){
				debounce_timer_down++;
				if(debounce_timer_down == BUTTON_DEBOUNCE_TIME){
					minutes--;
					evaluate();
				}else if(debounce_timer_down % 50 == 0 && debounce_timer_down > 150){
					minutes--;
					evaluate();
				}
			}else{debounce_timer_down = 0;}
		}
		// The second button is being pushed
		if(currentButtonState & BUTTON_SEC){
			// The up button is being pushed
			if(currentButtonState & BUTTON_UP){
				debounce_timer_up++;
				if(debounce_timer_up == BUTTON_DEBOUNCE_TIME){
					seconds++;
					evaluate();
				}else if(debounce_timer_up % 50 == 0 && debounce_timer_up > 150){
					seconds++;
					evaluate();
				}
			}else{debounce_timer_up = 0;}
			// The down button is being pushed
			if(currentButtonState & BUTTON_DOWN){
				debounce_timer_down++;
				if(debounce_timer_down == BUTTON_DEBOUNCE_TIME){
					seconds--;
					evaluate();
				}else if(debounce_timer_down % 50 == 0 && debounce_timer_down > 150){
					seconds--;
					evaluate();
				}
			}else{debounce_timer_down = 0;}
		}
	}
}

// This updates our time variables to make time sense
// This is also what displays the time
void evaluate(){
	// These if statements make the time go up
	if(seconds >= 59){		// Seconds are between 0 and 59
		seconds = 0;
		minutes++;	// new minute!
	}
	if(minutes >= 59){		// Minutes are between 0 and 59
		minutes = 0;
		hours++;	// new hour!
	}
	if(hours >= 23){		// Hours are between 0 and 23
		hours = 0;
	}

	// These if statements make the time go down
	if(seconds <= -1){		// Can't have negative seconds
		seconds = 59;
		minutes--;	// Subtract a minute
	}
	if(minutes <= -1){		// Can't have negative minutes
		minutes = 59;
		hours--;	// Subtract an hour
	}
	if(hours <= -1){		// Can't have negative hours
		hours = 23;
	}
	// Prints the time. We only use a carriage return so we can overwrite it
	xil_printf("\e[104m %02 d\e[5m : \e[25 %02d \e[5m : \e[25 %02d \e[49m\r", hours, minutes, seconds);
}


// This is invoked each time there is a change in the button state
// (result of a push or a bounce).
void pb_interrupt_handler() {

	// Clear the GPIO interrupt.
	XGpio_InterruptGlobalDisable(&gpPB);                // Off PB interrupts now
	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get state of buttons.
	// This was all that was necessary. Just update the button state
	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
	XGpio_InterruptGlobalEnable(&gpPB);                 // Enable PB interrupts.
}

// Main interrupt handler, queries interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is timer_interrupt_handler() called after ack'ing controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();	// It was a timer interrupt! call that fn
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();		// It was a button interrupt!
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, // Acknowledge the interrupt
				XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
}

int main (void) {
	init_platform();
	// Initialize the GPIO peripherals.
	int success;
	print("\n\rHello Everyone. Let's have a fun \e[31m\e[1mtime \e[21m\e[0m\n\r");
	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();

	while(1);  // Program never ends.

	cleanup_platform();

	return 0;
}
