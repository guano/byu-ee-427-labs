/*
 * timer.c
 *
 *  Created on: Sep 13, 2016
 *      Author: superman
 */
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include <stdbool.h>


#define BUTTON_UP 0x10
#define BUTTON_DOWN 0x4
#define BUTTON_HOUR 0x8
#define BUTTON_MIN 0x1
#define BUTTON_SEC 0x2
#define NO_BUTTONS 0
#define BUTTON_DEBOUNCE_TIME 1

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.
int currentButtonState = 0;
int pushedButtonState = 0;
int timerCount = 0;
int debounce_timer_min 	= 0;
int debounce_timer_sec 	= 0;
int debounce_timer_hour_up = 0;
int debounce_timer_hour_down = 0;
int debounce_timer_up 	= 0;
int debounce_timer_down = 0;

int hours = 10;
int minutes = 10;
int seconds = 40;

// We call this once a second to update the time
void tick();
void evaluate();

// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {



	if(currentButtonState == NO_BUTTONS){
		timerCount++;
		if(timerCount >= 100){
			timerCount = 0;
			second++;
			evaluate();
			//tick();
		}
	}else{
		if(currentButtonState & BUTTON_HOUR){

			if(currentButtonState & BUTTON_UP){
				debounce_timer_hour_up++;
				if(debounce_timer_hour_up == BUTTON_DEBOUNCE_TIME){
					hours++;
					evaluate();
				}
			}else{debounce_timer_hour_up = 0;}

			if(currentButtonState & BUTTON_DOWN){
				debounce_timer_hour_down++;
				if(debounce_timer_hour_down == BUTTON_DEBOUNCE_TIME){
					hours--;
					evaluate();
				}
			}else{debounce_timer_hour_down = 0;}
		}

		if(currentButtonState & BUTTON_MIN){
			if(currentButtonState & BUTTON_UP){
				minutes++;
				evaluate();
			}
			if(currentButtonState & BUTTON_DOWN){
				minutes--;
				evaluate();
			}
		}
		if(currentButtonState & BUTTON_SEC){
			if(currentButtonState & BUTTON_UP){
				seconds++;
				evaluate();
			}
			if(currentButtonState & BUTTON_DOWN){
				seconds--;
				evaluate();
			}
		}
	}
}

void evaluate(){
	if(seconds >= 59){
		seconds = 0;
		minutes++;
	}
	if(minutes >= 59){
		minutes = 0;
		hours++;
	}
	if(hours >= 23){
		hours = 0;
	}
	if(seconds <= -1){
		seconds = 59;
		minutes--;
	}
	if(minutes <= -1){
		minutes = 59;
		hours++;
	}
	if(hours <= -1){
		hours = 23;
	}
	xil_printf("%02d:%02d:%02d\r", hours, minutes, seconds);
}

void tick(){
	if(seconds == 59){
		seconds = 0;
		if(minutes == 59){
			minutes = 0;
			if(hours == 23){
				hours = 0;
			} else {
				hours++;
			}
		} else {
			minutes++;
		}
	} else {
		seconds++;
	}
	xil_printf("%02d:%02d:%02d\r", hours, minutes, seconds);
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {

	// Clear the GPIO interrupt.
	XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
	// You need to do something here.


	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
	XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is the timer_interrupt_handler() called after ack'ing the interrupt controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
}

int main (void) {
	init_platform();
	// Initialize the GPIO peripherals.
	int success;
	print("Hello Everyone\n\r");
	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();

	while(1);  // Program never ends.

	cleanup_platform();

	return 0;
}
