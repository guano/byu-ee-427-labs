/*
 * bunkers.c
 *
 *  Created on: Sep 21, 2016
 *      Author: superman
 */
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"

#include "bunkers.h"

#define BUNKER_HEIGHT 18
#define BUNKER_DAMAGE_HEIGHT 6
#define GREEN 0x0000FF00

#define packword6(b5,b4,b3,b2,b1,b0) \
	((b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )


#define packword24(b23,b22,b21,b20,b19,b18,b17,b16,b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
		((b23 << 23) | (b22 << 22) | (b21 << 21) | (b20 << 20) | (b19 << 19) | (b18 << 18) | (b17 << 17) | (b16 << 16) |						  \
				(b15 << 15) | (b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) |						  \
				(b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )
// Shape of the entire bunker.
static const int bunker_24x18[BUNKER_HEIGHT] =
{
		packword24(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0),
		packword24(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
		packword24(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
		packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
		packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1)
};

static const int bunkerDamage0_6x6[BUNKER_DAMAGE_HEIGHT] = {
	packword6(0,1,1,0,0,0),
	packword6(0,0,0,0,0,1),
	packword6(1,1,0,1,0,0),
	packword6(1,0,0,0,0,0),
	packword6(0,0,1,1,0,0),
	packword6(0,0,0,0,1,0)
};

static const int bunkerDamage1_6x6[BUNKER_DAMAGE_HEIGHT] = {
packword6(1,1,1,0,1,0),
packword6(1,0,1,0,0,1),
packword6(1,1,0,1,1,1),
packword6(1,0,0,0,0,0),
packword6(0,1,1,1,0,1),
packword6(0,1,1,0,1,0)
};

static const int bunkerDamage2_6x6[BUNKER_DAMAGE_HEIGHT] = {
packword6(1,1,1,1,1,1),
packword6(1,0,1,1,0,1),
packword6(1,1,0,1,1,1),
packword6(1,1,0,1,1,0),
packword6(0,1,1,1,0,1),
packword6(1,1,1,1,1,1)
};

static const int bunkerDamage3_6x6[BUNKER_DAMAGE_HEIGHT] = {
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1)
};

#define DAMAGE_WORD_WIDTH 6
#define WORD_WIDTH 24
#define NUM_OF_BUNKERS 4
#define LOC_BUNKER_ONE 60	// Divided this by 2 because screen is half
struct bunker{
	int row;
	int col;
	int damage;
	int pixel[];
}bunker[3];
void bunker1(int r,unsigned int * framePointer );

void init_bunkers(unsigned int * framePointer){
	int i, loc = LOC_BUNKER_ONE;
	for(i = 0; i < NUM_OF_BUNKERS ; i++){
		bunker[i].row = 175;	// Divided by 2 because screen is half
		bunker[i].col = loc;
		bunker[i].damage = 0;
		loc += LOC_BUNKER_ONE;
	}
	build_bunkers(framePointer);
}


void build_bunkers(unsigned int * framePointer){
	int row, col;
	for(row=0;row<18;row++){
		for(col=0;col<24;col++){
			if ((bunker_24x18[row] & (1<<(WORD_WIDTH-col-1)))) {
				framePointer[(row + bunker[0].row)*640*2 + (col + bunker[0].col)*2] = GREEN;
				framePointer[(row + bunker[0].row)*640*2 + (col + bunker[0].col)*2 + 1] = GREEN;
				framePointer[(row + bunker[0].row)*640*2 + 640 + (col + bunker[0].col)*2] = GREEN;
				framePointer[(row + bunker[0].row)*640*2 + 640 + (col + bunker[0].col)*2 + 1] = GREEN;

				framePointer[(row + bunker[1].row)*640*2 + (col + bunker[1].col)*2] = GREEN;
				framePointer[(row + bunker[1].row)*640*2 + (col + bunker[1].col)*2 + 1] = GREEN;
				framePointer[(row + bunker[1].row)*640*2 + 640 + (col + bunker[1].col)*2] = GREEN;
				framePointer[(row + bunker[1].row)*640*2 + 640 + (col + bunker[1].col)*2 + 1] = GREEN;

				framePointer[(row + bunker[2].row)*640*2 + (col + bunker[2].col)*2] = GREEN;
				framePointer[(row + bunker[2].row)*640*2 + (col + bunker[2].col)*2 + 1] = GREEN;
				framePointer[(row + bunker[2].row)*640*2 + 640 + (col + bunker[2].col)*2] = GREEN;
				framePointer[(row + bunker[2].row)*640*2 + 640 + (col + bunker[2].col)*2 + 1] = GREEN;


				framePointer[(row + bunker[3].row)*640*2 + (col + bunker[3].col)*2] = GREEN;
				framePointer[(row + bunker[3].row)*640*2 + (col + bunker[3].col)*2 + 1] = GREEN;
				framePointer[(row + bunker[3].row)*640*2 + 640 + (col + bunker[3].col)*2] = GREEN;
				framePointer[(row + bunker[3].row)*640*2 + 640 + (col + bunker[3].col)*2 + 1] = GREEN;
			}
		}
	}
}

void rand_bunker(unsigned int * framePointer){
	switch (rand()%4){
	case 0:
		//bunker0(rand()%11);
		break;
	case 1:
		bunker1(rand()%11, framePointer);
		break;
	case 2:
		//bunker2(rand()%11);
		break;
	case 3:
		//bunker3(rand()%11);
		break;
	}
}
int bunker_zero[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int bunker_one[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int bunker_two[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int bunker_three[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void bunker1(int r, unsigned int * framePointer){
	switch(r){
	case 0:
		if(bunker_one[0]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(0, 0, 1, bunker[0], framePointer);
			bunker_one[0]+=1;
		}
		break;
	case 1:
		if(bunker_one[1]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(0, 5, 1, bunker[1], framePointer);
			bunker_one[1]+=1;
		}
		break;
	case 2:
		if(bunker_one[2]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(0, 11, 1, bunker[2], framePointer);
			bunker_one[2]+=1;
		}
		break;
	case 3:
		if(bunker_one[3]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(0, 17, 1, bunker[3], framePointer);
			bunker_one[3]+=1;
		}
		break;
	case 4:
		if(bunker_one[4]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(5, 0, 1, bunker[4], framePointer);
			bunker_one[4]+=1;
		}
		break;
	case 5:
		if(bunker_one[5]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(5, 5, 1, bunker[5], framePointer);
			bunker_one[5]+=1;
		}
		break;
	case 6:
		if(bunker_one[6]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(5, 11, 1, bunker[6], framePointer);
			bunker_one[6]+=1;
		}
		break;
	case 7:
		if(bunker_one[7]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(5, 17, 1, bunker[7], framePointer);
			bunker_one[7]+=1;
		}
		break;
	case 8:
		if(bunker_one[8]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(11, 0, 1, bunker[8], framePointer);
			bunker_one[8]+=1;
		}
		break;
	case 9:
		if(bunker_one[9]== 4){
			rand_bunker(framePointer);
		}else {
			degrigation_patern(11, 17, 1, bunker[9], framePointer);
			bunker_one[9]+=1;
		}
		break;
	}
}


void degrigation_patern(int row, int col, int bunker_number, int damage, unsigned int * framePointer){
	for(row=0;row<BUNKER_DAMAGE_HEIGHT;row++){
		for(col=0;col<DAMAGE_WORD_WIDTH;col++){
			if (damage == 0){
				if ((bunkerDamage0_6x6[row] & (1<<(DAMAGE_WORD_WIDTH-col-1)))) {
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
				}
			}else if(damage == 1){
				/*if ((bunkerDamage1_6x6 & (1<<(DAMAGE_WORD_WIDTH-col-1)))) {
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
				}*/

			}else if(damage == 2){
				/*if ((bunkerDamage2_6x6 & (1<<(DAMAGE_WORD_WIDTH-col-1)))) {
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
				}*/

			}else if(damage == 3){
				/*if ((bunkerDamage3_6x6 & (1<<(DAMAGE_WORD_WIDTH-col-1)))) {
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2] = BLACK;
					framePointer[(row + bunker[bunker_number].row)*640*2 + 640 + (col + bunker[bunker_number].col)*2 + 1] = BLACK;
				}*/
			}
		}
	}
}


