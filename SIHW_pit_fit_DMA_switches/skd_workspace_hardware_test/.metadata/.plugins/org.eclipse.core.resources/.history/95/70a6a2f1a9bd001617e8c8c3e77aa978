/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include <stdint.h>
#include <xgpio.h>          	// Provides access to PB GPIO driver.
#include <stdlib.h>
#include <xaxivdma.h>
#include <xio.h>
#include <unistd.h>
#include "dma.h"
#include "platform.h"
#include "xparameters.h"
#include "mb_interface.h"   	// provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        	// Provides handy macros for the interrupt controller.
#include "time.h"


void timer_interrupt_handler() {
//	xil_printf("timer interrupt\r\n");
}

void dma_interrupt_handler() {
	xil_printf("DMA interrupt\r\n");
}

XGpio gpPB;   // This is a handle for the push-button GPIO block.
int32_t currentButtonState;		// Current button being pressed
void pb_interrupt_handler(){
	XGpio_InterruptGlobalDisable(&gpPB);	// Can't be interrupted by buttons

	currentButtonState = XGpio_DiscreteRead(&gpPB, 1);
	// Time to clear the interrupt and reenable GPIO interrupts
	xil_printf("Button pushed: 0x%x\n\r", currentButtonState);

	XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);
	XGpio_InterruptGlobalEnable(&gpPB);
}


XGpio gpSWITCHES;   // This is a handle for the push-button GPIO block.
int32_t currentSWITCHState;		// Current button being pressed
void SWITCHES_interrupt_handler(){
	XGpio_InterruptGlobalDisable(&gpSWITCHES);	// Can't be interrupted by buttons

	currentButtonState = XGpio_DiscreteRead(&gpSWITCHES, 1);
	// Time to clear the interrupt and reenable GPIO interrupts
	xil_printf("\t\tSWITCH SWITCHED LOL: 0x%x\n\r", currentSWITCHState);

	XGpio_InterruptClear(&gpSWITCHES, 0xFFFFFFFF);
	XGpio_InterruptGlobalEnable(&gpSWITCHES);
}

void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the pit interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	//Check DMA interrupt
	if (intc_status & XPAR_DMA_0_DMA_COMPLETE_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_DMA_0_DMA_COMPLETE_INTERRUPT_MASK);
		dma_interrupt_handler();
	}

	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();		// It was a button interrupt!
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, // Acknowledge the interrupt
				XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
}

void init_interrupts(void){
	int32_t success;
	print("\n\rHello . Let's have a fun \e[31m\e[1mtime \e[21m\e[0m\n\r");
	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);

	// Set the push button peripheral to be inputs.
	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);
	// And enable interrupts
}


void print(char *str);

int main()
{
	init_interrupts();
	//Set the source array of random values
	int source_arr[] = {0x12345678, 0xDEADBEEF, 0x09876543, 0xBEEFB00B, 0xBEEF1234};
	// set the destination array to be empty
	int dest_arr[] = {0x0, 0x0, 0x0, 0x0, 0x0};
	//init the platform
	init_platform();

	// init the interrupts
	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,(XPAR_DMA_0_DMA_COMPLETE_INTERRUPT_MASK|XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	microblaze_enable_interrupts();

	cleanup_platform();
	xil_printf("Printing value before DMA transfer.\n\r");
	int i;
	int length = 6; // in words
	for(i = 0; i < length; i++){
		xil_printf("%x\r\n", dest_arr[i]);
	}

	DMA_Init(XPAR_DMA_0_BASEADDR, (Xuint32) source_arr, (Xuint32) dest_arr, (Xuint32) (length-1)*4);
	DMA_Go(XPAR_DMA_0_BASEADDR);


	//print the destination array after transfer
	xil_printf("Printing value after DMA burst transfer.\n\r");
	for(i = 0; i < length; i++){
		xil_printf("%x\r\n", dest_arr[i]);
	}
	while(1);
	cleanup_platform();
    return 0;
}
