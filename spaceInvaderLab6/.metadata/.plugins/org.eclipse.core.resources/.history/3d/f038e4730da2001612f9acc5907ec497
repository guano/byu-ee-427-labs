/*****************************************************************************
* Filename:          C:\Users\superman\Desktop\byu-ee-427-labs\PIT\MyProcessorIPLib/drivers/pit_v1_00_a/src/pit_selftest.c
* Version:           1.00.a
* Description:       Contains a diagnostic self-test function for the pit driver
* Date:              Wed Nov 02 16:29:39 2016 (by Create and Import Peripheral Wizard)
*****************************************************************************/


/***************************** Include Files *******************************/

#include "pit.h"
#include "stdio.h"
#include "xio.h"
#include "xparameters.h"
#include <stdint.h>
#include "xintc_l.h"


/************************** Constant Definitions ***************************/

#define READ_WRITE_MUL_FACTOR 0x10

/************************** Variable Definitions ****************************/


/************************** Function Definitions ***************************/

/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the PIT instance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus PIT_SelfTest(void * baseaddr_p)
{
  Xuint32 baseaddr;
  int write_loop_index;
  int read_loop_index;
  int Index;
  
  /*
   * Check and get the device address
   */
  /*
   * Base Address maybe 0. Up to developer to uncomment line below.
  XASSERT_NONVOID(baseaddr_p != XNULL);
   */
  baseaddr = (Xuint32) baseaddr_p;

  xil_printf("******************************\n\r");
  xil_printf("* User Peripheral Self Test\n\r");
  xil_printf("******************************\n\n\r");

  /*
   * Write to user logic slave module register(s) and read back
   */
  xil_printf("User logic slave module test...\n\r");

  for (write_loop_index = 0 ; write_loop_index < PIT_USER_NUM_REG; write_loop_index++)
    PIT_mWriteSlaveReg0 (baseaddr, write_loop_index*4, (write_loop_index+1)*READ_WRITE_MUL_FACTOR);
  for (read_loop_index = 0 ; read_loop_index < PIT_USER_NUM_REG; read_loop_index++)
    if ( PIT_mReadSlaveReg0 (baseaddr, read_loop_index*4) != (read_loop_index+1)*READ_WRITE_MUL_FACTOR){
      xil_printf ("Error reading register value at address %x", (int)baseaddr + read_loop_index*4);
      return XST_FAILURE;
    }

  xil_printf("   - slave register write/read passed\n\n\r");

  /* Read the registers at the base address to ensure that this is indeed working */
  if ( (PIT_mReadSlaveReg0 (baseaddr, 0)) != 0x0){
    xil_printf("   - soft reset failed\n\n\r");
    return XST_FAILURE;
  }

  xil_printf("   - soft reset passed\n\n\r");

  return XST_SUCCESS;
}

void interrupt_handler_dispatcher(){
	xil_printf(":)\n\r");
}


void init_interrupts(void){
	int32_t success;
	print("\n\rHello . Let's have a fun \e[31m\e[1mtime \e[21m\e[0m\n\r");
//	success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
	// Set the push button peripheral to be inputs.
//	XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
	// Enable the global GPIO interrupt for push buttons.
//	XGpio_InterruptGlobalEnable(&gpPB);
	// Enable all interrupts in the push button peripheral.
//	XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);
	// Register the interrupt handler
	microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	// And enable interrupts


	XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,	// interrupts to enable
	(XPAR_PIT_0_MYINTERRUPT_MASK));
	// Master the enable
	XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	// And enable again
	microblaze_enable_interrupts();
}

int main(){
	init_interrupts();
	xil_printf("now attempting to test the PIT\n\r");

	Xuint32 base = XPAR_PIT_0_BASEADDR;
	//PIT_SelfTest(base);


	PIT_mWriteSlaveReg0 (base, 0, 0x00f00000);

	PIT_mWriteSlaveReg0 (base, 1*4, 0xf0000000);

	uint32_t read_value = PIT_mReadSlaveReg0 (base, 4*3);
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	xil_printf("read value of reg1: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*1));
	xil_printf("read value of reg2: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*2));
	xil_printf("read value of reg3: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*3));
	//xil_printf("read value of reg4???: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*4));;

	PIT_mWriteSlaveReg0 (base, 2*4, 0x00000001);	// writing stuff to the control register - allowing decrement

	while((read_value = PIT_mReadSlaveReg0 (base, 0)) != 0){
		xil_printf("read value of timer: 0x%08x\n\r", read_value);
	}

	xil_printf("we have reached 0\n\r");
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	xil_printf("read value of reg0: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));

	xil_printf("\n\rNow let us enable the interrupts\n\r");
	PIT_mWriteSlaveReg0 (base, 2*4, 0x00000005);	// writing stuff to the control register - allowing decrement
	while(1){
		xil_printf("timer: 0x%08x\n\r", PIT_mReadSlaveReg0 (base, 4*0));
	}


	return 0;
}
