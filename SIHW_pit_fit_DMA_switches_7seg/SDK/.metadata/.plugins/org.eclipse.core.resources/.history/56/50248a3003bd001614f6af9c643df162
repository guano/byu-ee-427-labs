/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include <stdint.h>
#include "dma.h"
#include "platform.h"
#include "xparameters.h"

void print(char *str);

int main()
{

	uint32_t source_word = 0xDEADBEEF;
	uint32_t destination_word = 0x0;

    init_platform();

    xil_printf("Hello World\n\r");
    cleanup_platform();
    xil_printf("Printing value before DMA transfer.\n\r");
    xil_printf("%x\r\n", destination_word);

    DMA_MasterRecvWord(XPAR_DMA_0_BASEADDR, (Xuint32) &source_word);
    DMA_MasterSendWord(XPAR_DMA_0_BASEADDR, (Xuint32) &destination_word);

    xil_printf("Printing value after DMA transfer.\n\r");
    xil_printf("%x\r\n", destination_word);

//    cleanup_platform();


	//ARRAY STORE

	/*
	//Set the source array of random values
	int source_arr[] = {0x12345678, 0xDEADBEEF, 0x09876543, 0xBEEFB00B, 0xBEEF1234};
	// set the destination array to be empty
	int dest_arr[] = {0x0, 0x0, 0x0, 0x0, 0x0};
	//init the platform
	init_platform();

	cleanup_platform();
	xil_printf("Printing value before DMA transfer.\n\r");
	int i;
	int length = 6; // in words
	for(i = 0; i < length; i++){
		xil_printf("%x\r\n", dest_arr[i]);
	}

	DMA_CONTROLLER_TranseferInitialize(XPAR_DMA_CONTROLLER_0_BASEADDR, (Xuint32) source_arr, (Xuint32) dest_arr, (Xuint32) (length-1)*4);
	DMA_CONTROLLER_TransferGo(XPAR_DMA_CONTROLLER_0_BASEADDR);


	//print the destination array after transfer
	xil_printf("Printing value after DMA burst transfer.\n\r");
	for(i = 0; i < length; i++){
		xil_printf("%x\r\n", dest_arr[i]);
	}
*/
    return 0;
}
